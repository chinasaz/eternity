
        # Check if exp_num is a fraction and split between numerator and 
        # denominator
        if '/' in self.exp_num:
            num, den = self.exp_num.split('/')
            
            # Check if num is an integer as well using represent_int
            if (ExponentialFunction.represent_int(num)):
                # Then check if den is an integer as well using represent_int
                if (ExponentialFunction.represent_int(den)):
                    d = int(den)
                    
                    # If d is 0, then the function returns None
                    if(d == 0):
                        self.answer = 0
                        return None
                        
                    # If d is negative, then d is and num are multiplied by -1
                    if(d < 0):
                        d *= -1
                        tempNum = int(num) * -1
                        num = str(tempNum)
                        
                    # Since exponent is fraction, the denominator represents a 
                    # root function
                    # Since anything to the power of 1/# is a root function
                    # use get_root to determine the new base_num
                    base_num = ExponentialFunction.get_root(d, self.base_num)
                    # A new ExponentialFunction object, temp, is used, so the 
                    # calling ExponentialFunction can keep original data
                    temp = ExponentialFunction(self.mult_num, base_num, 
                                                num, self.answer)
                    self.answer = temp.calculate_answer()
                    return self.answer
                
                # If den is a decimal, then multiply it by increment i until it 
                # is an integer
                # tempDen will temporarily store the variable den
                else:
                    i = 2
                    tempDen = den
                    
                    # If float(den) is 0, then the function returns None
                    if(float(den) == 0):
                        self.answer = 0
                        return None
                    
                    d = 0.0
                    while (ExponentialFunction.represent_int(tempDen) == 
                            False):
                        d = float(den)
                        d *= i
                        i += 1
                        tempDen = str(d)
                    
                    # If d is negative, then d is and num are multiplied by -1
                    if(d < 0):
                        d *= -1
                        tempNum = int(num) * -1
                        num = str(tempNum)
                    
                    # Once den becomes an integer, use get_root to determine 
                    # the new of base_num 
                    base_num = ExponentialFunction.get_root(int(d), 
                                                            self.base_num)
                    # Then multiply numerator by i - 1 to keep the exponent 
                    # equal since we multiplied the denominator, we have to 
                    # multiply numerator as well
                    n = int(num) * (i - 1)
                    # Set new exp_num and create new ExponentialFunction 
                    # object to calculate
                    exp_num = str(n)
                    temp = ExponentialFunction(self.mult_num, base_num, 
                                                exp_num, self.answer)
                    self.answer = temp.calculate_answer()
                    return self.answer
            
            # If num is a decimal, then it will have to be updated as well
            # tempNum will temporarily store the variable num
            else:
                i = 2
                tempNum = num
                n = 0.0
                while (ExponentialFunction.represent_int(tempNum) == False):
                    n = float(num)
                    n *= i
                    i += 1
                    tempNum = str(n)
                
                # Once num is an integer, then check if den is an integer
                if (ExponentialFunction.represent_int(den)):
                    # den is multiplied by i since num was converted to an int
                    d = int(den) * (i - 1)
                    
                    # If d is 0, then the function returns None 
                    if(d == 0):
                        self.answer = 0
                        return None
                        
                    # If d is negative, then d is and n are multiplied by -1
                    if(d < 0):
                        d *= -1
                        n *= -1
                        tempNum = str(n)
                        
                    # Use get_root to determine the new base_num
                    base_num = ExponentialFunction.get_root(d, self.base_num)
                    # Then create new ExponentialFunction to call 
                    # calculate_answer
                    temp = ExponentialFunction(self.mult_num, base_num, 
                                                tempNum, self.answer)
                    self.answer = temp.calculate_answer()
                    return self.answer
                
                # If den is a decimal, it will need to be converted as well
                # since num was converted to an integer, den is multiplied by 
                # the value of i - 1
                else:
                    j = 2
                    d = float(den) * (i - 1)
                    
                    # If d is 0, then the function returns None
                    if(d == 0):
                        self.answer = 0
                        return None
                        
                    den = str(d)
                    tempDen = den
                    while (ExponentialFunction.represent_int(tempDen) == 
                            False):
                        d = float(den)
                        d *= j
                        j += 1
                        tempDen = str(d)
                        
                    # If d is negative, then d is and num are multiplied by -1
                    if(d < 0):
                        d *= -1
                        n *= -1
                        
                    # Once den becomes an integer, use get_root to determine 
                    # the new base_num 
                    base_num = ExponentialFunction.get_root(int(d), 
                                                            self.base_num)
                    # Then updated exp_num by n and j before creating new 
                    # ExponentialFunction to call calculate_answer
                    n *= (j - 1)
                    tempExp = str(n)
                    temp = ExponentialFunction(self.mult_num, base_num, 
                                                tempExp, self.answer)
                    self.answer = temp.calculate_answer()
                    return self.answer
        
        # Then check that exp_num is an integer using represent_int
        elif (ExponentialFunction.represent_int(self.exp_num)):
            temp = float(self.exp_num)
            exp = int(temp)
            # If exp_num >= 0, then the answer is multiplied by the base_num, 
            # exp_num times
            if exp >= 0:
                for index in range(exp):
                    self.answer *= self.base_num
                # The final answer is retrieved after multiplying the current 
                # answer by mult_num
                self.answer *= self.mult_num
                return self.answer
        
            # If exp_num < 0, then the answer is multiplied by the base num, 
            # (-1 * exp_num) times
            elif exp < 0:
                for index in range(-1 * exp):
                    self.answer *= self.base_num
                # The final answer is retrieved after multiplying 
                # (1/current answer) by mult_num
                self.answer = self.mult_num * (1/self.answer)
                return self.answer
                
        # Finally, if the exponent is a decimal
        # The exponent will then be multiplied by increment i until it becomes 
        # an integer
        else:
            i = 2
            tempExp = self.exp_num
            e = 0.0
            while (ExponentialFunction.represent_int(tempExp) == False):
                e = float(self.exp_num)
                e *= i
                i += 1
                tempExp = str(e)
            # Once exp_num is an integer, use get_root to get new base after 
            # multiplying exponent
            base_num = ExponentialFunction.get_root((i - 1), self.base_num)
            # Then create new ExponentialFunction with new base_num and tempExp
            # as the exp_num before calling calculate_answer
            temp = ExponentialFunction(self.mult_num, base_num, tempExp, 
                                                self.answer)
            self.answer = temp.calculate_answer()
            return self.answer
			
# represent_int is used to determine if passed string is integer or not   
    def represent_int(s):
        # Try to convert s to int, if it succeeds, return true
        try: 
            int(s)
            return True
        # If it fails, then catch the excpetion
        except ValueError:
            # Then convert to s to float and convert to int to check if equal
            n = float(s)
            m = int(n)
            # If n == m, then that means s is an integer
            if (m == n) :
                return True
            # Else, return False
            return False
            
    # special_root function is used to find root value when not a perfect root
    # root is the specific root to find, square, cube, etc.
    # num is the value to be rooted
    # i and j represent the range of values that will be searched for root
    def special_root(root, num, i, j):
        # Start at middle of range
        mid = (i + j)/2
        n = mid
        # Check if that is the answer
        for index in range(root - 1):
            n *= mid
        
        # If n is equal to num, or within an accepted uncertainty, 
        # then the function returns n
        if ((n == num) or (abs(num - n) < 0.000000001)):
            return mid
            
        # Else if n > num, then call root again, but between i and mid
        elif (n > num):
            return ExponentialFunction.special_root(root, num, i, mid)
        
        # Else, return root between mid and j
        else:
            return ExponentialFunction.special_root(root, num, mid, j)
        
    # get_root function is used to find the specific root of the passed value
    # root is the specific root, whether it be square, cube, etc.
    # num is the passed value to be rooted
    def get_root(root, num):
        # Initial guess is set to 1
        i = 1
        
        # The function then enters a while loop and only exits when result is 
        # True
        result = False
        while (result == False):
            # Check if num is a perfect root
            # Set n = i, then multiply it by i as many times as needed for 
            # root desired
            n = i
            for index in range(root - 1):
                n *= i
            
            # If n == num, then return n
            if (n == num):
                return i
            
            # If n > num, then num is not a perfect root, and need to call 
            # recursive function special_root
            # Since n > num, the root value lies between i-1 and i
            elif (n > num):
                i = ExponentialFunction.special_root(root, num, i - 1, i)
                return i
            
            # Increment i by 1 each time
            i += 1


Previous algorithm
The algorithm chosen was used to deal with decimal or fractional exponents. When the exponent is an integer, calculating the answer becomes trivial, the base is multiplied by itself the exponent number of times, and then multiplied by the multiplier to get a final answer. When the exponent is a fraction or decimal, it was decided the easiest way to deal with it, was changing the base so that the exponent becomes an integer. The algorithm works by first turning the decimal into a fraction if it is not already a fraction. This is done by multiplying the exponent by integer values starting from 2 and increasing by 1 each time, until the exponent becomes an integer. Increasing by 1 was decided since it is unclear how many digits the decimal will have and to avoid missing smaller integer values to multiply by. For instance, if the fraction is 4/100, while multiplying by 100 seems like the easiest choice, we can multiply by 25 and get 1 instead, making it even simpler.
To turn the decimal into a fraction, we multiply it by the integer value found over itself (essentially, multiplying it by 1). With a fraction, the denominator can be used to change the base, since #1/a is equivalent to a√#. The get_root and Root functions are used to determine the specified root, since the denominator can be any value, for passed argument. This generates a new base, and then the numerator is used as the new exponent value for the new base. Since the exponent is an integer again, the new base is multiplied by itself, the passed number of times. The calculate_answer function deals with all 3 of the mentioned cases, when the exponent is already a fraction, when it is an integer, or when it is a decimal, and calls the get_root function if need be. 
The root function was used since it still allows the original algorithm for calculating the exponential function to be used. It is also easier to deal with the exponents when they are integers, while for the base, it does not matter since it is just being used for simple multiplication. The get_root function works by first taking an integer i and assigning it the value of 1. It is then multiplied the desired number of times for the root (twice for square, thrice for cube, etc.), to determine if it is the root value. The starting position was chosen to be 1, since we do not know what root we are looking for util the function is called, meaning an educated guess cannot be made for the value, like with simple square root. If the value of i is the root value, the function returns i, else it increments i by 1 until it is the root, or until the multiplication of i to itself the root number of times is greater than the value, we are trying to find the root for. Meaning that the root of the passed value is between i and i – 1. When that is the case, the root is not an integer, so Root is called. It is initially called with a range of i and i – 1, and calculates the middle value between the two, mid, to see if it is the root, or a reasonable approximation. If it is, it returns the middle value, if it is greater than the root, it calls Root again, with a range from i – 1 to mid, and if it is less, it calls Root with a range from mid to i. This cycle repeats, as the function calls itself, changing the interval of search each time, until it finds the root, or the root within a reasonable difference of the value |value - midn| < 0.000000001. 0.000000001 was chosen to offer a little more precision than ordinary calculator, and to ensure no infinite loops.
