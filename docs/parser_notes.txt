Parser needs to parse basic opertors and understand their priority:
    +
    -
    *
    /



Parser needs to parse functions:
    sin()
    cos()
    MAD()
    ...


Parser needs to understand parentheses priority

Parser needs to parse operations inside functions -->  sin(x+y*z)

Parser will need to recursively handle the string

Parser will use regular expressions to match strings

For parsing functions, whose parameters do not require any further parsing,
we can simply match a regex expression and act accordingly.

For parsing functions, whose parameters require further parsing, extract the
top-level function from the string and recursively pass the parameter down.

For basic operators (+,-,*,/), compiled regex is required to context save the split
parameters
    For the / operator, need to parse the denominator before proceeding with the calculation
    and check if it is valid

For the parser to work properly, any whitespaces are removed from the input function.
This is because it uses indexing to find the left, right and operator within the string
thus having a whitespace shift the index over and can cause an error


Basic operator split operation priority order:
    *
    /
    +
    -
    NOTE: This lead to + and - having a high priority so the order is now:
        +
        -
        *
        /


Process:
    - Do functions with decimal/float parameters
    - Do cascading functions
    - Do parentheses
    - Do everything else





!!! The process above involved too many issues. Mainly due to manually parsing everything, a new approach is required !!!

(New) Process:
    - Parse functions with decimal/float parameters
    - Parse everything in parentheses

REGEX is still extensively used as it is the simplest method of extracting recurring substrings from the equation; thus
allowing for batch parsing.

Rather than re-invent the wheel and manually parse the basics (+, -, /, *), I can use eval() at the end to have Python 
do the finalized parsing. Which means only the functions need to be parsed and any of the basic operations within 
parentheses. This should suffice.

Rather than using recursion, in which the stack can eventually run out with complex equations/expressions, a WHILE loop
can be used to iteratively parse the function. The stop condition being that the final string doesnt contain any functions or
parentheses with basic operations.

Current build works for all my non-standard test cases, and as such this template is considered ready. Further testing will be
NECESSARY when all functions are added.