- The MAD function must be contained in a class to conform with out implementation.
- There are 3 main instance variables that need to exist in order for this function to work with the history system:
    - Values == A list of values to perform the operation operation
    - Mean   == A mean (AVG) value of the values. This will be used in the MAD calculation.
    - Mad    == The mean absolute deviation value of the list. Publicly available once the object is instantiated.

- In order for tthe object to behave as intended, there are 3 main methods that need to be implemented:
    - __init__          == This will be used to instantiate the variables (its a constructor)
    - calculate_mean    == This will perform the necessary operations to calculate the mean. The rough implementation
                           scheme can be found in the pseudocode. As of now, the method will be made private, as it is 
                           only planned to be used as a helper function for the MAD calculation. In the event that we
                           want to implement a mean function on the front-end, this can be opened up.
    - calculate_mad     == Calculate the mean average deviation. It uses calculate_mean method so as to not have the same
                           function in two different methods.

- Since using math.abs() isn't allowed (as per the requirements), I have opted to manually check each calculated difference
  to ensure that there are no negatives. If a negative number is detected, the program multiples it by -1 to convert it to a
  positive number. The implementation was intuitive.


- Some extra support setters/getters functions were added to try to make the data more accessible and to conform to our 
  implementation choices.

- The class (and methods) were tested with various sample data. With both positive and negative numbers and with large and
  small sets. The results were compared with various online MAD calculators and the number produced by this class matches 
  those found online. Therefore, I can conclude that the algorithm is accurate.